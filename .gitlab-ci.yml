stages: [build, test, staging, scanning, release]

default:
  tags: [docker-build-01]

variables:
  OUTPUT_PATH: '$CI_PROJECT_DIR/artifacts'

.before_docker:
  before_script:
    # Auth using the built-in CI token (no Keychain touched)
    - echo "$CI_TOKEN" | docker login "$CI_REGISTRY" -u "$CI_USER" --password-stdin

build_test_image:
  stage: build
  extends: .before_docker
  only: [dev, merge_requests]
  script:
    - docker build -f dockerfiles/Dockerfile.test --provenance=false -t "$CI_REGISTRY_IMAGE:test" --push . --build-arg UserID=$(id -u) --build-arg "NPM_REGISTRY_EP=//git.blvckleg.dev/api/v4/packages/npm/" --build-arg "NPM_ACCESS_TOKEN=${CI_TOKEN}"

test_test_image:
  stage: test
  extends: .before_docker
  needs: [build_test_image]
  only: [dev, merge_requests]
  script:
    - mkdir -p artifacts
    - docker run --rm "$CI_REGISTRY_IMAGE:test" npm run lint
    - docker run --rm -v "$PWD/artifacts:/home/runner/artifacts" "$CI_REGISTRY_IMAGE:test" npm run test
  after_script:
    - docker image rm -f "$CI_REGISTRY_IMAGE:test" || true
  artifacts:
    name: 'tests-and-coverage'
    when: on_success
    reports:
      junit:
        - '$OUTPUT_PATH/tests/junit-test-results.xml'
      coverage_report:
        coverage_format: cobertura
        path: '$OUTPUT_PATH/coverage/cobertura-coverage.xml'

build_staging_image:
  stage: staging
  extends: .before_docker
  only: [dev]
  needs: [test_test_image]
  script:
    - docker build -f dockerfiles/Dockerfile --provenance=false -t "$CI_REGISTRY_IMAGE:staging" --push . --build-arg "NPM_REGISTRY_EP=//git.blvckleg.dev/api/v4/packages/npm/" --build-arg "NPM_ACCESS_TOKEN=${CI_TOKEN}"

build_release_image:
  stage: release
  extends: .before_docker
  only: [tags]
  when: manual
  script:
    - docker build -f dockerfiles/Dockerfile --provenance=false -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}" --push . --build-arg "NPM_REGISTRY_EP=//git.blvckleg.dev/api/v4/packages/npm/" --build-arg "NPM_ACCESS_TOKEN=${CI_TOKEN}"

sast:
  stage: test
  tags:
    - docker-build-01

container_scanning_staging:
  extends: container_scanning
  stage: scanning
  needs:
    - build_staging_image
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: '$CI_COMMIT_REF_NAME == "dev"'
    when: always
  tags:
    - docker-build-01
  before_script:
    - export CS_IMAGE="git.blvckleg.dev:5050/personal/alinas-app/aandm_backend:staging"

container_scanning:
  rules:
    - when: never

include:
- template: Security/SAST.gitlab-ci.yml
- template: Jobs/Container-Scanning.gitlab-ci.yml
