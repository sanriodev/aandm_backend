stages: [build, test, staging, release]

default:
  tags: [docker-build-01]

variables:
  OUTPUT_PATH: "$CI_PROJECT_DIR/artifacts"
  DOCKER_BUILDKIT: "1"

.before_docker:
  before_script:
    # Auth using the built-in CI token (no Keychain touched)
    - echo "$CI_JOB_TOKEN" | docker login "$CI_REGISTRY" -u gitlab-ci-token --password-stdin

build_test_image:
  stage: build
  extends: .before_docker
  only: [dev, merge_requests]
  script:
    - docker buildx build -f dockerfiles/Dockerfile.test --provenance=false -t "$CI_REGISTRY_IMAGE:test" --push . --build-arg UserID=$(id -u)

test_test_image:
  stage: test
  extends: .before_docker
  needs: [build_test_image]
  only: [dev, merge_requests]
  script:
    - mkdir -p artifacts
    - docker run --rm "$CI_REGISTRY_IMAGE:test" npm run lint
    - docker run --rm -v "$PWD/artifacts:/home/runner/artifacts" "$CI_REGISTRY_IMAGE:test" npm run test
  after_script:
    - docker image rm -f "$CI_REGISTRY_IMAGE:test" || true
  artifacts:
    name: "tests-and-coverage"
    when: on_success
    reports:
      junit:
        - "$OUTPUT_PATH/tests/junit-test-results.xml"
      coverage_report:
        coverage_format: cobertura
        path: "$OUTPUT_PATH/coverage/cobertura-coverage.xml"

build_staging_image:
  stage: staging
  extends: .before_docker
  only: [dev]
  needs: [test_test_image]
  script:
    - docker buildx build -f dockerfiles/Dockerfile --provenance=false -t "$CI_REGISTRY_IMAGE:staging" --push .

build_release_image:
  stage: release
  extends: .before_docker
  only: [tags]
  when: manual
  script:
    - docker buildx build -f dockerfiles/Dockerfile --provenance=false -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}" --push .
